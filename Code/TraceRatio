{"cells":[{"cell_type":"markdown","metadata":{"id":"eBe3rZziBJ3c"},"source":["\n","Thư viện\n","\n"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7145,"status":"ok","timestamp":1655826307603,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"zSqDV8rjcwnM","outputId":"f7e50fc6-e5a0-4d2c-8ae6-e1cd3eaadeb3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: catboost in /usr/local/lib/python3.7/dist-packages (1.0.6)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (5.5.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.4.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.3.5)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.21.6)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2022.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (3.0.9)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.4.3)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->catboost) (4.1.1)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (8.0.1)\n"]}],"source":["pip install catboost"]},{"cell_type":"code","execution_count":43,"metadata":{"executionInfo":{"elapsed":20,"status":"ok","timestamp":1655826307604,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"9sYr7F8JBMu9"},"outputs":[],"source":["\n","from catboost import CatBoostRegressor, CatBoostClassifier\n","from sklearn.model_selection import train_test_split\n","\n","import numpy as np\n","import pandas as pd\n","import scipy.io\n","from sklearn.model_selection import KFold\n","from sklearn import svm\n","from sklearn.metrics import accuracy_score, r2_score, mean_squared_error, roc_auc_score, f1_score\n","from scipy.sparse import *\n","from sklearn.metrics.pairwise import pairwise_distances\n","import time\n","import math"]},{"cell_type":"code","execution_count":44,"metadata":{"executionInfo":{"elapsed":2007,"status":"ok","timestamp":1655826309592,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"HkRpB_1VBqk3"},"outputs":[],"source":["def construct_W(X, **kwargs):\n"," \n","    # default metric is 'cosine'\n","    if 'metric' not in kwargs.keys():\n","        kwargs['metric'] = 'cosine'\n","\n","    # default neighbor mode is 'knn' and default neighbor size is 5\n","    if 'neighbor_mode' not in kwargs.keys():\n","        kwargs['neighbor_mode'] = 'knn'\n","    if kwargs['neighbor_mode'] == 'knn' and 'k' not in kwargs.keys():\n","        kwargs['k'] = 5\n","    if kwargs['neighbor_mode'] == 'supervised' and 'k' not in kwargs.keys():\n","        kwargs['k'] = 5\n","    if kwargs['neighbor_mode'] == 'supervised' and 'y' not in kwargs.keys():\n","        print ('Warning: label is required in the supervised neighborMode!!!')\n","        exit(0)\n","\n","    # default weight mode is 'binary', default t in heat kernel mode is 1\n","    if 'weight_mode' not in kwargs.keys():\n","        kwargs['weight_mode'] = 'binary'\n","    if kwargs['weight_mode'] == 'heat_kernel':\n","        if kwargs['metric'] != 'euclidean':\n","            kwargs['metric'] = 'euclidean'\n","        if 't' not in kwargs.keys():\n","            kwargs['t'] = 1\n","    elif kwargs['weight_mode'] == 'cosine':\n","        if kwargs['metric'] != 'cosine':\n","            kwargs['metric'] = 'cosine'\n","\n","    # default fisher_score and reliefF mode are 'false'\n","    if 'fisher_score' not in kwargs.keys():\n","        kwargs['fisher_score'] = False\n","    if 'reliefF' not in kwargs.keys():\n","        kwargs['reliefF'] = False\n","\n","    n_samples, n_features = np.shape(X)\n","\n","    # choose 'knn' neighbor mode\n","    if kwargs['neighbor_mode'] == 'knn':\n","        k = kwargs['k']\n","        if kwargs['weight_mode'] == 'binary':\n","            if kwargs['metric'] == 'euclidean':\n","                # compute pairwise euclidean distances\n","                D = pairwise_distances(X)\n","                D **= 2\n","                # sort the distance matrix D in ascending order\n","                dump = np.sort(D, axis=1)\n","                idx = np.argsort(D, axis=1)\n","                # choose the k-nearest neighbors for each instance\n","                idx_new = idx[:, 0:k+1]\n","                G = np.zeros((n_samples*(k+1), 3))\n","                G[:, 0] = np.tile(np.arange(n_samples), (k+1, 1)).reshape(-1)\n","                G[:, 1] = np.ravel(idx_new, order='F')\n","                G[:, 2] = 1\n","                # build the sparse affinity matrix W\n","                W = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","                bigger = np.transpose(W) > W\n","                W = W - W.multiply(bigger) + np.transpose(W).multiply(bigger)\n","                return W\n","\n","            elif kwargs['metric'] == 'cosine':\n","                # normalize the data first\n","                X_normalized = np.power(np.sum(X*X, axis=1), 0.5)\n","                for i in range(n_samples):\n","                    X[i, :] = X[i, :]/max(1e-12, X_normalized[i])\n","                # compute pairwise cosine distances\n","                D_cosine = np.dot(X, np.transpose(X))\n","                # sort the distance matrix D in descending order\n","                dump = np.sort(-D_cosine, axis=1)\n","                idx = np.argsort(-D_cosine, axis=1)\n","                idx_new = idx[:, 0:k+1]\n","                G = np.zeros((n_samples*(k+1), 3))\n","                G[:, 0] = np.tile(np.arange(n_samples), (k+1, 1)).reshape(-1)\n","                G[:, 1] = np.ravel(idx_new, order='F')\n","                G[:, 2] = 1\n","                # build the sparse affinity matrix W\n","                W = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","                bigger = np.transpose(W) > W\n","                W = W - W.multiply(bigger) + np.transpose(W).multiply(bigger)\n","                return W\n","\n","        elif kwargs['weight_mode'] == 'heat_kernel':\n","            t = kwargs['t']\n","            # compute pairwise euclidean distances\n","            D = pairwise_distances(X)\n","            D **= 2\n","            # sort the distance matrix D in ascending order\n","            dump = np.sort(D, axis=1)\n","            idx = np.argsort(D, axis=1)\n","            idx_new = idx[:, 0:k+1]\n","            dump_new = dump[:, 0:k+1]\n","            # compute the pairwise heat kernel distances\n","            dump_heat_kernel = np.exp(-dump_new/(2*t*t))\n","            G = np.zeros((n_samples*(k+1), 3))\n","            G[:, 0] = np.tile(np.arange(n_samples), (k+1, 1)).reshape(-1)\n","            G[:, 1] = np.ravel(idx_new, order='F')\n","            G[:, 2] = np.ravel(dump_heat_kernel, order='F')\n","            # build the sparse affinity matrix W\n","            W = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","            bigger = np.transpose(W) > W\n","            W = W - W.multiply(bigger) + np.transpose(W).multiply(bigger)\n","            return W\n","\n","        elif kwargs['weight_mode'] == 'cosine':\n","            # normalize the data first\n","            X_normalized = np.power(np.sum(X*X, axis=1), 0.5)\n","            for i in range(n_samples):\n","                    X[i, :] = X[i, :]/max(1e-12, X_normalized[i])\n","            # compute pairwise cosine distances\n","            D_cosine = np.dot(X, np.transpose(X))\n","            # sort the distance matrix D in ascending order\n","            dump = np.sort(-D_cosine, axis=1)\n","            idx = np.argsort(-D_cosine, axis=1)\n","            idx_new = idx[:, 0:k+1]\n","            dump_new = -dump[:, 0:k+1]\n","            G = np.zeros((n_samples*(k+1), 3))\n","            G[:, 0] = np.tile(np.arange(n_samples), (k+1, 1)).reshape(-1)\n","            G[:, 1] = np.ravel(idx_new, order='F')\n","            G[:, 2] = np.ravel(dump_new, order='F')\n","            # build the sparse affinity matrix W\n","            W = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","            bigger = np.transpose(W) > W\n","            W = W - W.multiply(bigger) + np.transpose(W).multiply(bigger)\n","            return W\n","\n","    # choose supervised neighborMode\n","    elif kwargs['neighbor_mode'] == 'supervised':\n","        k = kwargs['k']\n","        # get true labels and the number of classes\n","        y = kwargs['y']\n","        label = np.unique(y)\n","        n_classes = np.unique(y).size\n","        # construct the weight matrix W in a fisherScore way, W_ij = 1/n_l if yi = yj = l, otherwise W_ij = 0\n","        if kwargs['fisher_score'] is True:\n","            W = lil_matrix((n_samples, n_samples))\n","            for i in range(n_classes):\n","                class_idx = (y == label[i])\n","                class_idx_all = (class_idx[:, np.newaxis] & class_idx[np.newaxis, :])\n","                W[class_idx_all] = 1.0/np.sum(np.sum(class_idx))\n","            return W\n","\n","        # construct the weight matrix W in a reliefF way, NH(x) and NM(x,y) denotes a set of k nearest\n","        # points to x with the same class as x, a different class (the class y), respectively. W_ij = 1 if i = j;\n","        # W_ij = 1/k if x_j \\in NH(x_i); W_ij = -1/(c-1)k if x_j \\in NM(x_i, y)\n","        if kwargs['reliefF'] is True:\n","            # when xj in NH(xi)\n","            G = np.zeros((n_samples*(k+1), 3))\n","            id_now = 0\n","            for i in range(n_classes):\n","                class_idx = np.column_stack(np.where(y == label[i]))[:, 0]\n","                D = pairwise_distances(X[class_idx, :])\n","                D **= 2\n","                idx = np.argsort(D, axis=1)\n","                idx_new = idx[:, 0:k+1]\n","                n_smp_class = (class_idx[idx_new[:]]).size\n","                if len(class_idx) <= k:\n","                    k = len(class_idx) - 1\n","                G[id_now:n_smp_class+id_now, 0] = np.tile(class_idx, (k+1, 1)).reshape(-1)\n","                G[id_now:n_smp_class+id_now, 1] = np.ravel(class_idx[idx_new[:]], order='F')\n","                G[id_now:n_smp_class+id_now, 2] = 1.0/k\n","                id_now += n_smp_class\n","            W1 = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","            # when i = j, W_ij = 1\n","            for i in range(n_samples):\n","                W1[i, i] = 1\n","            # when x_j in NM(x_i, y)\n","            G = np.zeros((n_samples*k*(n_classes - 1), 3))\n","            id_now = 0\n","            for i in range(n_classes):\n","                class_idx1 = np.column_stack(np.where(y == label[i]))[:, 0]\n","                X1 = X[class_idx1, :]\n","                for j in range(n_classes):\n","                    if label[j] != label[i]:\n","                        class_idx2 = np.column_stack(np.where(y == label[j]))[:, 0]\n","                        X2 = X[class_idx2, :]\n","                        D = pairwise_distances(X1, X2)\n","                        idx = np.argsort(D, axis=1)\n","                        idx_new = idx[:, 0:k]\n","                        n_smp_class = len(class_idx1)*k\n","                        G[id_now:n_smp_class+id_now, 0] = np.tile(class_idx1, (k, 1)).reshape(-1)\n","                        G[id_now:n_smp_class+id_now, 1] = np.ravel(class_idx2[idx_new[:]], order='F')\n","                        G[id_now:n_smp_class+id_now, 2] = -1.0/((n_classes-1)*k)\n","                        id_now += n_smp_class\n","            W2 = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","            bigger = np.transpose(W2) > W2\n","            W2 = W2 - W2.multiply(bigger) + np.transpose(W2).multiply(bigger)\n","            W = W1 + W2\n","            return W\n","\n","        if kwargs['weight_mode'] == 'binary':\n","            if kwargs['metric'] == 'euclidean':\n","                G = np.zeros((n_samples*(k+1), 3))\n","                id_now = 0\n","                for i in range(n_classes):\n","                    class_idx = np.column_stack(np.where(y == label[i]))[:, 0]\n","                    # compute pairwise euclidean distances for instances in class i\n","                    D = pairwise_distances(X[class_idx, :])\n","                    D **= 2\n","                    # sort the distance matrix D in ascending order for instances in class i\n","                    idx = np.argsort(D, axis=1)\n","                    idx_new = idx[:, 0:k+1]\n","                    n_smp_class = len(class_idx)*(k+1)\n","                    G[id_now:n_smp_class+id_now, 0] = np.tile(class_idx, (k+1, 1)).reshape(-1)\n","                    G[id_now:n_smp_class+id_now, 1] = np.ravel(class_idx[idx_new[:]], order='F')\n","                    G[id_now:n_smp_class+id_now, 2] = 1\n","                    id_now += n_smp_class\n","                # build the sparse affinity matrix W\n","                W = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","                bigger = np.transpose(W) > W\n","                W = W - W.multiply(bigger) + np.transpose(W).multiply(bigger)\n","                return W\n","\n","            if kwargs['metric'] == 'cosine':\n","                # normalize the data first\n","                X_normalized = np.power(np.sum(X*X, axis=1), 0.5)\n","                for i in range(n_samples):\n","                    X[i, :] = X[i, :]/max(1e-12, X_normalized[i])\n","                G = np.zeros((n_samples*(k+1), 3))\n","                id_now = 0\n","                for i in range(n_classes):\n","                    class_idx = np.column_stack(np.where(y == label[i]))[:, 0]\n","                    # compute pairwise cosine distances for instances in class i\n","                    D_cosine = np.dot(X[class_idx, :], np.transpose(X[class_idx, :]))\n","                    # sort the distance matrix D in descending order for instances in class i\n","                    idx = np.argsort(-D_cosine, axis=1)\n","                    idx_new = idx[:, 0:k+1]\n","                    n_smp_class = len(class_idx)*(k+1)\n","                    G[id_now:n_smp_class+id_now, 0] = np.tile(class_idx, (k+1, 1)).reshape(-1)\n","                    G[id_now:n_smp_class+id_now, 1] = np.ravel(class_idx[idx_new[:]], order='F')\n","                    G[id_now:n_smp_class+id_now, 2] = 1\n","                    id_now += n_smp_class\n","                # build the sparse affinity matrix W\n","                W = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","                bigger = np.transpose(W) > W\n","                W = W - W.multiply(bigger) + np.transpose(W).multiply(bigger)\n","                return W\n","\n","        elif kwargs['weight_mode'] == 'heat_kernel':\n","            G = np.zeros((n_samples*(k+1), 3))\n","            id_now = 0\n","            for i in range(n_classes):\n","                class_idx = np.column_stack(np.where(y == label[i]))[:, 0]\n","                # compute pairwise cosine distances for instances in class i\n","                D = pairwise_distances(X[class_idx, :])\n","                D **= 2\n","                # sort the distance matrix D in ascending order for instances in class i\n","                dump = np.sort(D, axis=1)\n","                idx = np.argsort(D, axis=1)\n","                idx_new = idx[:, 0:k+1]\n","                dump_new = dump[:, 0:k+1]\n","                t = kwargs['t']\n","                # compute pairwise heat kernel distances for instances in class i\n","                dump_heat_kernel = np.exp(-dump_new/(2*t*t))\n","                n_smp_class = len(class_idx)*(k+1)\n","                G[id_now:n_smp_class+id_now, 0] = np.tile(class_idx, (k+1, 1)).reshape(-1)\n","                G[id_now:n_smp_class+id_now, 1] = np.ravel(class_idx[idx_new[:]], order='F')\n","                G[id_now:n_smp_class+id_now, 2] = np.ravel(dump_heat_kernel, order='F')\n","                id_now += n_smp_class\n","            # build the sparse affinity matrix W\n","            W = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","            bigger = np.transpose(W) > W\n","            W = W - W.multiply(bigger) + np.transpose(W).multiply(bigger)\n","            return W\n","\n","        elif kwargs['weight_mode'] == 'cosine':\n","            # normalize the data first\n","            X_normalized = np.power(np.sum(X*X, axis=1), 0.5)\n","            for i in range(n_samples):\n","                X[i, :] = X[i, :]/max(1e-12, X_normalized[i])\n","            G = np.zeros((n_samples*(k+1), 3))\n","            id_now = 0\n","            for i in range(n_classes):\n","                class_idx = np.column_stack(np.where(y == label[i]))[:, 0]\n","                # compute pairwise cosine distances for instances in class i\n","                D_cosine = np.dot(X[class_idx, :], np.transpose(X[class_idx, :]))\n","                # sort the distance matrix D in descending order for instances in class i\n","                dump = np.sort(-D_cosine, axis=1)\n","                idx = np.argsort(-D_cosine, axis=1)\n","                idx_new = idx[:, 0:k+1]\n","                dump_new = -dump[:, 0:k+1]\n","                n_smp_class = len(class_idx)*(k+1)\n","                G[id_now:n_smp_class+id_now, 0] = np.tile(class_idx, (k+1, 1)).reshape(-1)\n","                G[id_now:n_smp_class+id_now, 1] = np.ravel(class_idx[idx_new[:]], order='F')\n","                G[id_now:n_smp_class+id_now, 2] = np.ravel(dump_new, order='F')\n","                id_now += n_smp_class\n","            # build the sparse affinity matrix W\n","            W = csc_matrix((G[:, 2], (G[:, 0], G[:, 1])), shape=(n_samples, n_samples))\n","            bigger = np.transpose(W) > W\n","            W = W - W.multiply(bigger) + np.transpose(W).multiply(bigger)\n","            return W"]},{"cell_type":"code","execution_count":45,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1655826309593,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"N-gr8w3ERSyx"},"outputs":[],"source":["def trace_ratio(X, y, n_selected_features, **kwargs):\n","    \n","    # if 'style' is not specified, use the fisher score way to built two affinity matrix\n","    if 'style' not in kwargs.keys():\n","        kwargs['style'] = 'fisher'\n","    # get the way to build affinity matrix, 'fisher' or 'laplacian'\n","    style = kwargs['style']\n","    n_samples, n_features = X.shape\n","\n","    # if 'verbose' is not specified, do not output the value of objective function\n","    if 'verbose' not in kwargs:\n","        kwargs['verbose'] = False\n","    verbose = kwargs['verbose']\n","\n","    if style is 'fisher':\n","        kwargs_within = {\"neighbor_mode\": \"supervised\", \"fisher_score\": True, 'y': y}\n","        # build within class and between class laplacian matrix L_w and L_b\n","        W_within = construct_W(X, **kwargs_within)\n","        L_within = np.eye(n_samples) - W_within\n","        L_tmp = np.eye(n_samples) - np.ones([n_samples, n_samples])/n_samples\n","        L_between = L_within - L_tmp\n","\n","    if style is 'laplacian':\n","        kwargs_within = {\"metric\": \"euclidean\", \"neighbor_mode\": \"knn\", \"weight_mode\": \"heat_kernel\", \"k\": 5, 't': 1}\n","        # build within class and between class laplacian matrix L_w and L_b\n","        W_within = construct_W(X, **kwargs_within)\n","        D_within = np.diag(np.array(W_within.sum(1))[:, 0])\n","        L_within = D_within - W_within\n","        W_between = np.dot(np.dot(D_within, np.ones([n_samples, n_samples])), D_within)/np.sum(D_within)\n","        D_between = np.diag(np.array(W_between.sum(1)))\n","        L_between = D_between - W_between\n","\n","    # build X'*L_within*X and X'*L_between*X\n","    L_within = (np.transpose(L_within) + L_within)/2\n","    L_between = (np.transpose(L_between) + L_between)/2\n","    S_within = np.array(np.dot(np.dot(np.transpose(X), L_within), X))\n","    S_between = np.array(np.dot(np.dot(np.transpose(X), L_between), X))\n","\n","    # reflect the within-class or local affinity relationship encoded on graph, Sw = X*Lw*X'\n","    S_within = (np.transpose(S_within) + S_within)/2\n","    # reflect the between-class or global affinity relationship encoded on graph, Sb = X*Lb*X'\n","    S_between = (np.transpose(S_between) + S_between)/2\n","\n","    # take the absolute values of diagonal\n","    s_within = np.absolute(S_within.diagonal())\n","    s_between = np.absolute(S_between.diagonal())\n","    s_between[s_between == 0] = 1e-14  # this number if from authors' code\n","\n","    # preprocessing\n","    fs_idx = np.argsort(np.divide(s_between, s_within), 0)[::-1]\n","    k = np.sum(s_between[0:n_selected_features])/np.sum(s_within[0:n_selected_features])\n","    s_within = s_within[fs_idx[0:n_selected_features]]\n","    s_between = s_between[fs_idx[0:n_selected_features]]\n","\n","    # iterate util converge\n","    count = 0\n","    while True:\n","        score = np.sort(s_between-k*s_within)[::-1]\n","        print(score)\n","        I = np.argsort(s_between-k*s_within)[::-1]\n","        idx = I[0:n_selected_features]\n","        old_k = k\n","        print(old_k)\n","        k = np.sum(s_between[idx])/np.sum(s_within[idx])\n","        print(k)\n","        if verbose:\n","            print('obj at iter {0}: {1}'.format(count+1, k))\n","        count += 1\n","        if abs(k - old_k) < 1e-3:\n","            break\n","\n","    # get feature index, feature-level score and subset-level score\n","    feature_idx = fs_idx[I]\n","    feature_score = score\n","    subset_score = k\n","\n","    return feature_idx, feature_score, subset_score\n","def feature_ranking(score):\n","    idx = np.argsort(score, 0)\n","    return idx[::-1]\n"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2227,"status":"ok","timestamp":1655826311813,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"StKaAAvfYfW9","outputId":"10d2cbbd-95d6-49e8-e590-d5afc6a88c33"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive \n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":47,"metadata":{"executionInfo":{"elapsed":2612,"status":"ok","timestamp":1655826314421,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"OHI_3_AeYgLL"},"outputs":[],"source":["# load data\n","\n","dataset = 'CreditScore.csv'\n","link = '/content/drive/MyDrive/FeatureSelection/dataset/' + dataset\n","df=pd.read_csv(link)\n","nRow, nCol = df.shape"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":486,"status":"ok","timestamp":1655826314903,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"2iQEAO6xcY2R","outputId":"69ebfc15-24a9-4b94-df9c-10e40ce79351"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        x001   x002  x003   x004   x005  x006  x007  x008  x009  x010  ...  \\\n","0  1324036.0  426.0  39.0  128.0  426.0   0.0   0.0   0.0   0.0   0.0  ...   \n","1   891688.0  160.0   2.0   64.0   37.0   0.0   0.0   0.0   0.0   0.0  ...   \n","2  1653660.0  200.0   2.0   47.0  316.0   0.0   1.0   1.0   4.0   0.0  ...   \n","3  1391981.0   21.0   4.0   10.0   77.0   0.0   1.0   7.0   5.0   2.0  ...   \n","4  1173110.0  153.0  13.0   73.0  153.0   0.0   0.0   0.0   1.0   3.0  ...   \n","\n","     x297  x298  x299  x300  x301  x302  x303  x304     id  y  \n","0     NaN   0.0   0.0   0.0   0.0   NaN   0.0   NaN  524.0  0  \n","1  0.8417   0.0   0.0   0.0   0.0   NaN   0.0   NaN  497.0  1  \n","2  0.0161   1.0   1.0   1.0   0.0   NaN   0.0   NaN  814.0  0  \n","3  0.8594   1.0   1.0   1.0   0.0   1.0   0.0   NaN  731.0  0  \n","4  1.0180   0.0   0.0   0.0   0.0   NaN   0.0   NaN  677.0  0  \n","\n","[5 rows x 306 columns]"],"text/html":["\n","  <div id=\"df-f257d7e9-b390-475f-a5f3-e2a511f8da80\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>x001</th>\n","      <th>x002</th>\n","      <th>x003</th>\n","      <th>x004</th>\n","      <th>x005</th>\n","      <th>x006</th>\n","      <th>x007</th>\n","      <th>x008</th>\n","      <th>x009</th>\n","      <th>x010</th>\n","      <th>...</th>\n","      <th>x297</th>\n","      <th>x298</th>\n","      <th>x299</th>\n","      <th>x300</th>\n","      <th>x301</th>\n","      <th>x302</th>\n","      <th>x303</th>\n","      <th>x304</th>\n","      <th>id</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1324036.0</td>\n","      <td>426.0</td>\n","      <td>39.0</td>\n","      <td>128.0</td>\n","      <td>426.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>524.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>891688.0</td>\n","      <td>160.0</td>\n","      <td>2.0</td>\n","      <td>64.0</td>\n","      <td>37.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.8417</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>497.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1653660.0</td>\n","      <td>200.0</td>\n","      <td>2.0</td>\n","      <td>47.0</td>\n","      <td>316.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0161</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>814.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1391981.0</td>\n","      <td>21.0</td>\n","      <td>4.0</td>\n","      <td>10.0</td>\n","      <td>77.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>7.0</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>0.8594</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>731.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1173110.0</td>\n","      <td>153.0</td>\n","      <td>13.0</td>\n","      <td>73.0</td>\n","      <td>153.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>...</td>\n","      <td>1.0180</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>677.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 306 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f257d7e9-b390-475f-a5f3-e2a511f8da80')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f257d7e9-b390-475f-a5f3-e2a511f8da80 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f257d7e9-b390-475f-a5f3-e2a511f8da80');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":48}],"source":["df.head()"]},{"cell_type":"code","execution_count":49,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1655826314904,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"8Iob76NfQuh8","outputId":"35046be2-81fa-489c-f842-945bf343d3d2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(13000, 306)"]},"metadata":{},"execution_count":49}],"source":["n_samples = 13000;\n","df = df.groupby('y', group_keys=False).apply(lambda x: x.sample(frac=n_samples/nRow))\n","df.shape"]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":367,"status":"ok","timestamp":1655826315263,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"tNjouA_sxfgD","outputId":"63f672a7-c0b4-4225-955f-6261250daadd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            x001   x002   x003   x004   x005  x006  x007  x008  x009  x010  \\\n","13288  1610382.0  100.0    0.0   39.0  163.0   0.0   1.0   1.0   0.0   6.0   \n","37167  1182348.0    3.0    3.0    3.0    3.0   0.0   1.0   1.0   0.0   0.0   \n","50961   917916.0   31.0    2.0   10.0  114.0   0.0   2.0  10.0   6.0   1.0   \n","57385  1402000.0   54.0    8.0   32.0  221.0   0.0   0.0   1.0   0.0   2.0   \n","30886  1115231.0  149.0  149.0  149.0  156.0   1.0   0.0   0.0   0.0   0.0   \n","\n","       ...    x297  x298  x299  x300  x301  x302  x303  x304     id  y  \n","13288  ...  0.6379   1.0   1.0   1.0   0.0   0.0   0.0   0.0  660.0  0  \n","37167  ...  0.5233   1.0   1.0   1.0   0.0   0.0   0.0   0.0  596.0  0  \n","50961  ...  0.8023   1.0   1.0   1.0   0.0   0.0   0.0   0.0  527.0  0  \n","57385  ...  0.0000   1.0   1.0   1.0   0.0   0.0   0.0   0.0  660.0  0  \n","30886  ...  0.0000   0.0   0.0   0.0   0.0   0.0   0.0   0.0  742.0  0  \n","\n","[5 rows x 306 columns]"],"text/html":["\n","  <div id=\"df-0975b287-6125-42cd-8e80-88d67bac554c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>x001</th>\n","      <th>x002</th>\n","      <th>x003</th>\n","      <th>x004</th>\n","      <th>x005</th>\n","      <th>x006</th>\n","      <th>x007</th>\n","      <th>x008</th>\n","      <th>x009</th>\n","      <th>x010</th>\n","      <th>...</th>\n","      <th>x297</th>\n","      <th>x298</th>\n","      <th>x299</th>\n","      <th>x300</th>\n","      <th>x301</th>\n","      <th>x302</th>\n","      <th>x303</th>\n","      <th>x304</th>\n","      <th>id</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>13288</th>\n","      <td>1610382.0</td>\n","      <td>100.0</td>\n","      <td>0.0</td>\n","      <td>39.0</td>\n","      <td>163.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>...</td>\n","      <td>0.6379</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>660.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>37167</th>\n","      <td>1182348.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.5233</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>596.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>50961</th>\n","      <td>917916.0</td>\n","      <td>31.0</td>\n","      <td>2.0</td>\n","      <td>10.0</td>\n","      <td>114.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>10.0</td>\n","      <td>6.0</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>0.8023</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>527.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>57385</th>\n","      <td>1402000.0</td>\n","      <td>54.0</td>\n","      <td>8.0</td>\n","      <td>32.0</td>\n","      <td>221.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>0.0000</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>660.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>30886</th>\n","      <td>1115231.0</td>\n","      <td>149.0</td>\n","      <td>149.0</td>\n","      <td>149.0</td>\n","      <td>156.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>742.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 306 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0975b287-6125-42cd-8e80-88d67bac554c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0975b287-6125-42cd-8e80-88d67bac554c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0975b287-6125-42cd-8e80-88d67bac554c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":50}],"source":["#df = df.dropna(axis='rows')\n","df = df.fillna(0)\n","cat_columns = df.select_dtypes(['object']).columns\n","if not cat_columns.empty:\n","  df[cat_columns] = df[cat_columns].apply(lambda x: pd.factorize(x)[0])\n","df.head()"]},{"cell_type":"code","execution_count":51,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1655826315264,"user":{"displayName":"Trí Trần Văn","userId":"17185413045773398434"},"user_tz":-420},"id":"eExOhfuDYlFV"},"outputs":[],"source":["\n","X = df.drop(columns=['id','y']).to_numpy()\n","\n","features_label = df.columns.difference(['y']).to_numpy()\n","y = df['y'].to_numpy()\n","n_samples, n_features = X.shape\n","del df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sBsVbY-DCPCH"},"outputs":[],"source":["start_time=time.time()\n","\n","#MODE: LAPLACIAN \n","# obtain the index of selected features\n","idx, feature_score, subset_score = trace_ratio(X, y, n_features, style='fisher')\n","\n","#print(subset_score)\n","# ranking: \n","idx = feature_ranking(feature_score)\n","print(\"------- MODE: Laplacian---------\")\n","\n","#print(feature_score)\n","#print(subset_score)\n","print(\"Ranking: \")\n","print(idx)\n","#print(features_label[idx[0:n_features]])\n"]},{"cell_type":"code","metadata":{"id":"KjDo2CQBZEjT"},"source":["idx_top10 = idx[0:int(n_features/10)]\n","print(\"--------------------------------------\")\n","print(\"index of top  10 : %s\" %idx_top10)\n","#print(\"Top 10 feature: %s \" %features_label[idx_top10])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sSbxA0VkZFPv"},"source":["idx_top15 = idx[0:int(15*n_features/100)]\n","print(\"--------------------------------------\")\n","#print(\"index of top  15 : %s\" %idx_top15)\n","print(\"Top 15 feature: %s \" %features_label[idx_top15])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p5dxEJ-iZFwD"},"source":["idx_top25 = idx[0:int(n_features/4)]\n","print(\"--------------------------------------\")\n","print(\"index of top  25: %s\" %idx_top25)\n","#print(\"Top 25 feature: %s \" %features_label[idx_top25])\n","\n","print(\"--- %s seconds ---\" % (time.time() - start_time))"],"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gORQB0jb8351"},"outputs":[],"source":["X_selected = X[:, idx_top10]\n","X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=5)\n","\n","# fit and predict\n","model = CatBoostClassifier(loss_function='Logloss', eval_metric='Accuracy')\n","model.fit(X_train, y_train)\n","y_predict = model.predict(X_test)\n","\n","y_predict\n","acc = \"{:.2f}\".format(accuracy_score(y_test,y_predict))\n","auc = \"{:.2f}\".format(roc_auc_score(y_test, y_predict))\n","f1 = \"{:.2f}\".format(f1_score(y_test,y_predict))\n","print('Accuracy =', accuracy_score(y_test,y_predict))\n","print('ROC AUC =', roc_auc_score(y_test, y_predict ))\n","print('F1 =', f1_score(y_test,y_predict))\n","\n","df=pd.read_csv('/content/drive/MyDrive/FeatureSelection/dataset/result.csv')\n","df2 = pd.DataFrame({'score':'TraceRatio','name':[dataset], 'samples': [n_samples], 'top': '10','acc':[acc],'auc':[auc],'f1':[f1]})\n","df = pd.concat([df,df2], ignore_index = True)\n","df.to_csv('/content/drive/MyDrive/FeatureSelection/dataset/result.csv', index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lljrByWlryat"},"outputs":[],"source":["X_selected = X[:, idx_top15]\n","X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=5)\n","\n","# fit and predict\n","\n","model = CatBoostClassifier(loss_function='Logloss', eval_metric='Accuracy')\n","model.fit(X_train, y_train)\n","y_predict = model.predict(X_test)\n","\n","acc = \"{:.2f}\".format(accuracy_score(y_test,y_predict))\n","auc = \"{:.2f}\".format(roc_auc_score(y_test, y_predict))\n","f1 = \"{:.2f}\".format(f1_score(y_test,y_predict))\n","print('Accuracy =', acc)\n","print('ROC AUC =', auc)\n","print('F1 =', f1)\n","\n","df=pd.read_csv('/content/drive/MyDrive/FeatureSelection/dataset/result.csv')\n","df2 = pd.DataFrame({'score':'TraceRatio','name':[dataset], 'samples': [n_samples], 'top': '15','acc':[acc],'auc':[auc],'f1':[f1]})\n","df = pd.concat([df,df2], ignore_index = True)\n","df.to_csv('/content/drive/MyDrive/FeatureSelection/dataset/result.csv', index=False)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NbFw9FAQr0m9"},"outputs":[],"source":["X_selected = X[:, idx_top25]\n","X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=5)\n","\n","# fit and predict\n","\n","model = CatBoostClassifier(loss_function='Logloss', eval_metric='Accuracy')\n","model.fit(X_train, y_train)\n","y_predict = model.predict(X_test)\n","\n","y_predict\n","acc = \"{:.2f}\".format(accuracy_score(y_test,y_predict))\n","auc = \"{:.2f}\".format(roc_auc_score(y_test, y_predict))\n","f1 = \"{:.2f}\".format(f1_score(y_test,y_predict))\n","print('Accuracy =', accuracy_score(y_test,y_predict))\n","print('ROC AUC =', roc_auc_score(y_test, y_predict ))\n","print('F1 =', f1_score(y_test,y_predict))\n","\n","df=pd.read_csv('/content/drive/MyDrive/FeatureSelection/dataset/result.csv')\n","df2 = pd.DataFrame({'score':'TraceRatio','name':[dataset], 'samples': [n_samples], 'top': '25','acc':[acc],'auc':[auc],'f1':[f1]})\n","df = pd.concat([df,df2], ignore_index = True)\n","df.to_csv('/content/drive/MyDrive/FeatureSelection/dataset/result.csv', index=False)"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"TraceRatio","provenance":[],"authorship_tag":"ABX9TyOaWtiZUKc526cyuRgZB47z"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}